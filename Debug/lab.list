
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001500  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080016ac  080016ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c4  080016c4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080016c4  080016c4  000116c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016cc  080016cc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016cc  080016cc  000116cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080016d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000178  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8eb  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5e  00000000  00000000  0002b93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00006397  00000000  00000000  0002d69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006c0  00000000  00000000  00033a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000680  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002395d  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cbf1  00000000  00000000  000580d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db309  00000000  00000000  00064cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0013ffcf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001038  00000000  00000000  00140024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001694 	.word	0x08001694

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08001694 	.word	0x08001694

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	2100      	movs	r1, #0
 80004e8:	9100      	str	r1, [sp, #0]
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_MspInit+0x34>)
 80004ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004f2:	645a      	str	r2, [r3, #68]	; 0x44
 80004f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	9101      	str	r1, [sp, #4]
 8000500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000502:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000506:	641a      	str	r2, [r3, #64]	; 0x40
 8000508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	9b01      	ldr	r3, [sp, #4]

}
 8000512:	b002      	add	sp, #8
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800051c:	b500      	push	{lr}
 800051e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2300      	movs	r3, #0
 8000522:	9303      	str	r3, [sp, #12]
 8000524:	9304      	str	r3, [sp, #16]
 8000526:	9305      	str	r3, [sp, #20]
 8000528:	9306      	str	r3, [sp, #24]
 800052a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800052c:	6802      	ldr	r2, [r0, #0]
 800052e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000532:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000536:	429a      	cmp	r2, r3
 8000538:	d002      	beq.n	8000540 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053a:	b009      	add	sp, #36	; 0x24
 800053c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000540:	2200      	movs	r2, #0
 8000542:	9201      	str	r2, [sp, #4]
 8000544:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000548:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800054a:	f041 0110 	orr.w	r1, r1, #16
 800054e:	6459      	str	r1, [r3, #68]	; 0x44
 8000550:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000552:	f001 0110 	and.w	r1, r1, #16
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	9202      	str	r2, [sp, #8]
 800055c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800055e:	f041 0101 	orr.w	r1, r1, #1
 8000562:	6319      	str	r1, [r3, #48]	; 0x30
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800056e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000572:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000574:	2302      	movs	r3, #2
 8000576:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800057e:	2307      	movs	r3, #7
 8000580:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	a903      	add	r1, sp, #12
 8000584:	4801      	ldr	r0, [pc, #4]	; (800058c <HAL_UART_MspInit+0x70>)
 8000586:	f000 f905 	bl	8000794 <HAL_GPIO_Init>
}
 800058a:	e7d6      	b.n	800053a <HAL_UART_MspInit+0x1e>
 800058c:	40020000 	.word	0x40020000

08000590 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler>

08000592 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler>

08000594 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler>

08000596 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler>

08000598 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <UsageFault_Handler>

0800059a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b508      	push	{r3, lr}
  static uint16_t ms_cntr = 0;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f889 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (ms_cntr++ == 1000){
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <SysTick_Handler+0x28>)
 80005a8:	8813      	ldrh	r3, [r2, #0]
 80005aa:	1c59      	adds	r1, r3, #1
 80005ac:	8011      	strh	r1, [r2, #0]
 80005ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b2:	d000      	beq.n	80005b6 <SysTick_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	  ms_cntr = 0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bd08      	pop	{r3, pc}
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005b6:	2101      	movs	r1, #1
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <SysTick_Handler+0x2c>)
 80005ba:	f000 f9e9 	bl	8000990 <HAL_GPIO_TogglePin>
	  ms_cntr = 0;
 80005be:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <SysTick_Handler+0x28>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	801a      	strh	r2, [r3, #0]
}
 80005c4:	e7f6      	b.n	80005b4 <SysTick_Handler+0x14>
 80005c6:	bf00      	nop
 80005c8:	20000040 	.word	0x20000040
 80005cc:	40020400 	.word	0x40020400

080005d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <SystemInit+0x10>)
 80005d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80005d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x12>
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LoopFillZerobss+0x16>)
 80005ea:	490e      	ldr	r1, [pc, #56]	; (8000624 <LoopFillZerobss+0x1a>)
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <LoopFillZerobss+0x1e>)
 80005ee:	2300      	movs	r3, #0
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:
 80005f2:	58d4      	ldr	r4, [r2, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:
 80005f8:	18c4      	adds	r4, r0, r3
 80005fa:	428c      	cmp	r4, r1
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x22>)
 8000600:	4c0b      	ldr	r4, [pc, #44]	; (8000630 <LoopFillZerobss+0x26>)
 8000602:	2300      	movs	r3, #0
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:
 800060a:	42a2      	cmp	r2, r4
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>
 800060e:	f7ff ffdf 	bl	80005d0 <SystemInit>
 8000612:	f001 f813 	bl	800163c <__libc_init_array>
 8000616:	f000 ff49 	bl	80014ac <main>
 800061a:	4770      	bx	lr
 800061c:	20030000 	.word	0x20030000
 8000620:	20000000 	.word	0x20000000
 8000624:	20000024 	.word	0x20000024
 8000628:	080016d4 	.word	0x080016d4
 800062c:	20000024 	.word	0x20000024
 8000630:	2000019c 	.word	0x2000019c

08000634 <ADC_IRQHandler>:
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b510      	push	{r4, lr}
 800063a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_InitTick+0x40>)
 800063e:	7818      	ldrb	r0, [r3, #0]
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	fbb3 f3f0 	udiv	r3, r3, r0
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <HAL_InitTick+0x44>)
 800064a:	6810      	ldr	r0, [r2, #0]
 800064c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000650:	f000 f88a 	bl	8000768 <HAL_SYSTICK_Config>
 8000654:	b968      	cbnz	r0, 8000672 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	2c0f      	cmp	r4, #15
 8000658:	d901      	bls.n	800065e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800065a:	2001      	movs	r0, #1
 800065c:	e00a      	b.n	8000674 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065e:	2200      	movs	r2, #0
 8000660:	4621      	mov	r1, r4
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	f000 f84b 	bl	8000700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_InitTick+0x48>)
 800066c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800066e:	2000      	movs	r0, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
}
 8000674:	bd10      	pop	{r4, pc}
 8000676:	bf00      	nop
 8000678:	20000004 	.word	0x20000004
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008

08000684 <HAL_Init>:
{
 8000684:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <HAL_Init+0x30>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800068e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000696:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800069e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f81b 	bl	80006dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff ffc6 	bl	8000638 <HAL_InitTick>
  HAL_MspInit();
 80006ac:	f7ff ff1a 	bl	80004e4 <HAL_MspInit>
}
 80006b0:	2000      	movs	r0, #0
 80006b2:	bd08      	pop	{r3, pc}
 80006b4:	40023c00 	.word	0x40023c00

080006b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x10>)
 80006ba:	6811      	ldr	r1, [r2, #0]
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <HAL_IncTick+0x14>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	440b      	add	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000148 	.word	0x20000148
 80006cc:	20000004 	.word	0x20000004

080006d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <HAL_GetTick+0x8>)
 80006d2:	6818      	ldr	r0, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000148 	.word	0x20000148

080006dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006e4:	041b      	lsls	r3, r3, #16
 80006e6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	0200      	lsls	r0, r0, #8
 80006ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006f8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000700:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_NVIC_SetPriority+0x60>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070a:	f1c3 0407 	rsb	r4, r3, #7
 800070e:	2c04      	cmp	r4, #4
 8000710:	bf28      	it	cs
 8000712:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000714:	1d1d      	adds	r5, r3, #4
 8000716:	2d06      	cmp	r5, #6
 8000718:	d918      	bls.n	800074c <HAL_NVIC_SetPriority+0x4c>
 800071a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 35ff 	mov.w	r5, #4294967295
 8000720:	fa05 f404 	lsl.w	r4, r5, r4
 8000724:	ea21 0104 	bic.w	r1, r1, r4
 8000728:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072a:	fa05 f303 	lsl.w	r3, r5, r3
 800072e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000732:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000734:	2800      	cmp	r0, #0
 8000736:	db0b      	blt.n	8000750 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	0109      	lsls	r1, r1, #4
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000740:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000744:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000748:	bc30      	pop	{r4, r5}
 800074a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074c:	2300      	movs	r3, #0
 800074e:	e7e5      	b.n	800071c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	f000 000f 	and.w	r0, r0, #15
 8000754:	0109      	lsls	r1, r1, #4
 8000756:	b2c9      	uxtb	r1, r1
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_NVIC_SetPriority+0x64>)
 800075a:	5419      	strb	r1, [r3, r0]
 800075c:	e7f4      	b.n	8000748 <HAL_NVIC_SetPriority+0x48>
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	e000ed14 	.word	0xe000ed14

08000768 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	3801      	subs	r0, #1
 800076a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800076e:	d20a      	bcs.n	8000786 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_SYSTICK_Config+0x24>)
 8000772:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_SYSTICK_Config+0x28>)
 8000776:	21f0      	movs	r1, #240	; 0xf0
 8000778:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	2000      	movs	r0, #0
 800077e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000794:	2300      	movs	r3, #0
 8000796:	2b0f      	cmp	r3, #15
 8000798:	f200 80ea 	bhi.w	8000970 <HAL_GPIO_Init+0x1dc>
{
 800079c:	b4f0      	push	{r4, r5, r6, r7}
 800079e:	b082      	sub	sp, #8
 80007a0:	e05e      	b.n	8000860 <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007a4:	005f      	lsls	r7, r3, #1
 80007a6:	2403      	movs	r4, #3
 80007a8:	40bc      	lsls	r4, r7
 80007aa:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ae:	68cc      	ldr	r4, [r1, #12]
 80007b0:	40bc      	lsls	r4, r7
 80007b2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80007b4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007b6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007b8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007bc:	684c      	ldr	r4, [r1, #4]
 80007be:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80007c6:	6042      	str	r2, [r0, #4]
 80007c8:	e058      	b.n	800087c <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007ca:	08dc      	lsrs	r4, r3, #3
 80007cc:	3408      	adds	r4, #8
 80007ce:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007d2:	f003 0207 	and.w	r2, r3, #7
 80007d6:	0096      	lsls	r6, r2, #2
 80007d8:	220f      	movs	r2, #15
 80007da:	40b2      	lsls	r2, r6
 80007dc:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007e0:	690a      	ldr	r2, [r1, #16]
 80007e2:	40b2      	lsls	r2, r6
 80007e4:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80007e6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80007ea:	e05b      	b.n	80008a4 <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ec:	2209      	movs	r2, #9
 80007ee:	e000      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 80007f0:	2200      	movs	r2, #0
 80007f2:	40b2      	lsls	r2, r6
 80007f4:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f6:	3402      	adds	r4, #2
 80007f8:	4e5e      	ldr	r6, [pc, #376]	; (8000974 <HAL_GPIO_Init+0x1e0>)
 80007fa:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007fe:	4a5e      	ldr	r2, [pc, #376]	; (8000978 <HAL_GPIO_Init+0x1e4>)
 8000800:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000802:	43ea      	mvns	r2, r5
 8000804:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000808:	684f      	ldr	r7, [r1, #4]
 800080a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800080e:	d001      	beq.n	8000814 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8000810:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000814:	4c58      	ldr	r4, [pc, #352]	; (8000978 <HAL_GPIO_Init+0x1e4>)
 8000816:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000818:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800081a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800081e:	684f      	ldr	r7, [r1, #4]
 8000820:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000824:	d001      	beq.n	800082a <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8000826:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800082a:	4c53      	ldr	r4, [pc, #332]	; (8000978 <HAL_GPIO_Init+0x1e4>)
 800082c:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800082e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000830:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000834:	684f      	ldr	r7, [r1, #4]
 8000836:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800083a:	d001      	beq.n	8000840 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 800083c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000840:	4c4d      	ldr	r4, [pc, #308]	; (8000978 <HAL_GPIO_Init+0x1e4>)
 8000842:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000844:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000846:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000848:	684e      	ldr	r6, [r1, #4]
 800084a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800084e:	d001      	beq.n	8000854 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8000850:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000854:	4c48      	ldr	r4, [pc, #288]	; (8000978 <HAL_GPIO_Init+0x1e4>)
 8000856:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000858:	3301      	adds	r3, #1
 800085a:	2b0f      	cmp	r3, #15
 800085c:	f200 8085 	bhi.w	800096a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000860:	2201      	movs	r2, #1
 8000862:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000864:	680c      	ldr	r4, [r1, #0]
 8000866:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800086a:	ea32 0404 	bics.w	r4, r2, r4
 800086e:	d1f3      	bne.n	8000858 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000870:	684c      	ldr	r4, [r1, #4]
 8000872:	f004 0403 	and.w	r4, r4, #3
 8000876:	3c01      	subs	r4, #1
 8000878:	2c01      	cmp	r4, #1
 800087a:	d992      	bls.n	80007a2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800087c:	684a      	ldr	r2, [r1, #4]
 800087e:	f002 0203 	and.w	r2, r2, #3
 8000882:	2a03      	cmp	r2, #3
 8000884:	d009      	beq.n	800089a <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 8000886:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000888:	005e      	lsls	r6, r3, #1
 800088a:	2203      	movs	r2, #3
 800088c:	40b2      	lsls	r2, r6
 800088e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000892:	688a      	ldr	r2, [r1, #8]
 8000894:	40b2      	lsls	r2, r6
 8000896:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000898:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089a:	684a      	ldr	r2, [r1, #4]
 800089c:	f002 0203 	and.w	r2, r2, #3
 80008a0:	2a02      	cmp	r2, #2
 80008a2:	d092      	beq.n	80007ca <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80008a4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a6:	005e      	lsls	r6, r3, #1
 80008a8:	2203      	movs	r2, #3
 80008aa:	40b2      	lsls	r2, r6
 80008ac:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b0:	684a      	ldr	r2, [r1, #4]
 80008b2:	f002 0203 	and.w	r2, r2, #3
 80008b6:	40b2      	lsls	r2, r6
 80008b8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80008ba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008bc:	684a      	ldr	r2, [r1, #4]
 80008be:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80008c2:	d0c9      	beq.n	8000858 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c4:	2200      	movs	r2, #0
 80008c6:	9201      	str	r2, [sp, #4]
 80008c8:	4a2c      	ldr	r2, [pc, #176]	; (800097c <HAL_GPIO_Init+0x1e8>)
 80008ca:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80008cc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80008d0:	6454      	str	r4, [r2, #68]	; 0x44
 80008d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008d4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80008dc:	089c      	lsrs	r4, r3, #2
 80008de:	1ca6      	adds	r6, r4, #2
 80008e0:	4a24      	ldr	r2, [pc, #144]	; (8000974 <HAL_GPIO_Init+0x1e0>)
 80008e2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008e6:	f003 0203 	and.w	r2, r3, #3
 80008ea:	0096      	lsls	r6, r2, #2
 80008ec:	220f      	movs	r2, #15
 80008ee:	40b2      	lsls	r2, r6
 80008f0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <HAL_GPIO_Init+0x1ec>)
 80008f6:	4290      	cmp	r0, r2
 80008f8:	f43f af7a 	beq.w	80007f0 <HAL_GPIO_Init+0x5c>
 80008fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000900:	4290      	cmp	r0, r2
 8000902:	d022      	beq.n	800094a <HAL_GPIO_Init+0x1b6>
 8000904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000908:	4290      	cmp	r0, r2
 800090a:	d020      	beq.n	800094e <HAL_GPIO_Init+0x1ba>
 800090c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000910:	4290      	cmp	r0, r2
 8000912:	d01e      	beq.n	8000952 <HAL_GPIO_Init+0x1be>
 8000914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000918:	4290      	cmp	r0, r2
 800091a:	d01c      	beq.n	8000956 <HAL_GPIO_Init+0x1c2>
 800091c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000920:	4290      	cmp	r0, r2
 8000922:	d01a      	beq.n	800095a <HAL_GPIO_Init+0x1c6>
 8000924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000928:	4290      	cmp	r0, r2
 800092a:	d018      	beq.n	800095e <HAL_GPIO_Init+0x1ca>
 800092c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000930:	4290      	cmp	r0, r2
 8000932:	d016      	beq.n	8000962 <HAL_GPIO_Init+0x1ce>
 8000934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000938:	4290      	cmp	r0, r2
 800093a:	d014      	beq.n	8000966 <HAL_GPIO_Init+0x1d2>
 800093c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000940:	4290      	cmp	r0, r2
 8000942:	f43f af53 	beq.w	80007ec <HAL_GPIO_Init+0x58>
 8000946:	220a      	movs	r2, #10
 8000948:	e753      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 800094a:	2201      	movs	r2, #1
 800094c:	e751      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 800094e:	2202      	movs	r2, #2
 8000950:	e74f      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 8000952:	2203      	movs	r2, #3
 8000954:	e74d      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 8000956:	2204      	movs	r2, #4
 8000958:	e74b      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 800095a:	2205      	movs	r2, #5
 800095c:	e749      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 800095e:	2206      	movs	r2, #6
 8000960:	e747      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 8000962:	2207      	movs	r2, #7
 8000964:	e745      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
 8000966:	2208      	movs	r2, #8
 8000968:	e743      	b.n	80007f2 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800096a:	b002      	add	sp, #8
 800096c:	bcf0      	pop	{r4, r5, r6, r7}
 800096e:	4770      	bx	lr
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40013800 	.word	0x40013800
 8000978:	40013c00 	.word	0x40013c00
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000

08000984 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000984:	b10a      	cbz	r2, 800098a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000986:	6181      	str	r1, [r0, #24]
 8000988:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800098a:	0409      	lsls	r1, r1, #16
 800098c:	6181      	str	r1, [r0, #24]
  }
}
 800098e:	4770      	bx	lr

08000990 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000990:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000992:	ea01 0203 	and.w	r2, r1, r3
 8000996:	ea21 0103 	bic.w	r1, r1, r3
 800099a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800099e:	6181      	str	r1, [r0, #24]
}
 80009a0:	4770      	bx	lr
	...

080009a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80009a4:	b510      	push	{r4, lr}
 80009a6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_PWREx_EnableOverDrive+0x70>)
 80009ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009b4:	641a      	str	r2, [r3, #64]	; 0x40
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_PWREx_EnableOverDrive+0x74>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c6:	f7ff fe83 	bl	80006d0 <HAL_GetTick>
 80009ca:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_PWREx_EnableOverDrive+0x78>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80009d4:	d108      	bne.n	80009e8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009d6:	f7ff fe7b 	bl	80006d0 <HAL_GetTick>
 80009da:	1b00      	subs	r0, r0, r4
 80009dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009e0:	d9f4      	bls.n	80009cc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80009e2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80009e4:	b002      	add	sp, #8
 80009e6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_PWREx_EnableOverDrive+0x7c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80009ee:	f7ff fe6f 	bl	80006d0 <HAL_GetTick>
 80009f2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_PWREx_EnableOverDrive+0x78>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009fc:	d107      	bne.n	8000a0e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009fe:	f7ff fe67 	bl	80006d0 <HAL_GetTick>
 8000a02:	1b00      	subs	r0, r0, r4
 8000a04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000a08:	d9f4      	bls.n	80009f4 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	e7ea      	b.n	80009e4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e7e8      	b.n	80009e4 <HAL_PWREx_EnableOverDrive+0x40>
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	420e0040 	.word	0x420e0040
 8000a1c:	40007000 	.word	0x40007000
 8000a20:	420e0044 	.word	0x420e0044

08000a24 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a24:	2800      	cmp	r0, #0
 8000a26:	f000 81df 	beq.w	8000de8 <HAL_RCC_OscConfig+0x3c4>
{
 8000a2a:	b570      	push	{r4, r5, r6, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a30:	6803      	ldr	r3, [r0, #0]
 8000a32:	f013 0f01 	tst.w	r3, #1
 8000a36:	d03b      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a38:	4ba6      	ldr	r3, [pc, #664]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f003 030c 	and.w	r3, r3, #12
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d02c      	beq.n	8000a9e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a44:	4ba3      	ldr	r3, [pc, #652]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d021      	beq.n	8000a94 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a50:	6863      	ldr	r3, [r4, #4]
 8000a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a56:	d04f      	beq.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a5c:	d052      	beq.n	8000b04 <HAL_RCC_OscConfig+0xe0>
 8000a5e:	4b9d      	ldr	r3, [pc, #628]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a70:	6863      	ldr	r3, [r4, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d050      	beq.n	8000b18 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a76:	f7ff fe2b 	bl	80006d0 <HAL_GetTick>
 8000a7a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7c:	4b95      	ldr	r3, [pc, #596]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a84:	d114      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a86:	f7ff fe23 	bl	80006d0 <HAL_GetTick>
 8000a8a:	1b40      	subs	r0, r0, r5
 8000a8c:	2864      	cmp	r0, #100	; 0x64
 8000a8e:	d9f5      	bls.n	8000a7c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000a90:	2003      	movs	r0, #3
 8000a92:	e1b0      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a94:	4b8f      	ldr	r3, [pc, #572]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000a9c:	d0d8      	beq.n	8000a50 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9e:	4b8d      	ldr	r3, [pc, #564]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000aa6:	d003      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x8c>
 8000aa8:	6863      	ldr	r3, [r4, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 819e 	beq.w	8000dec <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	f013 0f02 	tst.w	r3, #2
 8000ab6:	d054      	beq.n	8000b62 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ab8:	4b86      	ldr	r3, [pc, #536]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f013 0f0c 	tst.w	r3, #12
 8000ac0:	d03e      	beq.n	8000b40 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ac2:	4b84      	ldr	r3, [pc, #528]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d033      	beq.n	8000b36 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ace:	68e3      	ldr	r3, [r4, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d067      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ad4:	4b80      	ldr	r3, [pc, #512]	; (8000cd8 <HAL_RCC_OscConfig+0x2b4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ada:	f7ff fdf9 	bl	80006d0 <HAL_GetTick>
 8000ade:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae0:	4b7c      	ldr	r3, [pc, #496]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f013 0f02 	tst.w	r3, #2
 8000ae8:	d153      	bne.n	8000b92 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aea:	f7ff fdf1 	bl	80006d0 <HAL_GetTick>
 8000aee:	1b40      	subs	r0, r0, r5
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9f5      	bls.n	8000ae0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
 8000af6:	e17e      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	4a76      	ldr	r2, [pc, #472]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e7b5      	b.n	8000a70 <HAL_RCC_OscConfig+0x4c>
 8000b04:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e7ab      	b.n	8000a70 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000b18:	f7ff fdda 	bl	80006d0 <HAL_GetTick>
 8000b1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	4b6d      	ldr	r3, [pc, #436]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b26:	d0c3      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b28:	f7ff fdd2 	bl	80006d0 <HAL_GetTick>
 8000b2c:	1b40      	subs	r0, r0, r5
 8000b2e:	2864      	cmp	r0, #100	; 0x64
 8000b30:	d9f5      	bls.n	8000b1e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000b32:	2003      	movs	r0, #3
 8000b34:	e15f      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b36:	4b67      	ldr	r3, [pc, #412]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b3e:	d1c6      	bne.n	8000ace <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b40:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f013 0f02 	tst.w	r3, #2
 8000b48:	d003      	beq.n	8000b52 <HAL_RCC_OscConfig+0x12e>
 8000b4a:	68e3      	ldr	r3, [r4, #12]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	f040 814f 	bne.w	8000df0 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b52:	4a60      	ldr	r2, [pc, #384]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b54:	6813      	ldr	r3, [r2, #0]
 8000b56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b5a:	6921      	ldr	r1, [r4, #16]
 8000b5c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b60:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	f013 0f08 	tst.w	r3, #8
 8000b68:	d040      	beq.n	8000bec <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b6a:	6963      	ldr	r3, [r4, #20]
 8000b6c:	b363      	cbz	r3, 8000bc8 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <HAL_RCC_OscConfig+0x2b8>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b74:	f7ff fdac 	bl	80006d0 <HAL_GetTick>
 8000b78:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b7e:	f013 0f02 	tst.w	r3, #2
 8000b82:	d133      	bne.n	8000bec <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b84:	f7ff fda4 	bl	80006d0 <HAL_GetTick>
 8000b88:	1b40      	subs	r0, r0, r5
 8000b8a:	2802      	cmp	r0, #2
 8000b8c:	d9f5      	bls.n	8000b7a <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8000b8e:	2003      	movs	r0, #3
 8000b90:	e131      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b92:	4a50      	ldr	r2, [pc, #320]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000b94:	6813      	ldr	r3, [r2, #0]
 8000b96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b9a:	6921      	ldr	r1, [r4, #16]
 8000b9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e7de      	b.n	8000b62 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <HAL_RCC_OscConfig+0x2b4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000baa:	f7ff fd91 	bl	80006d0 <HAL_GetTick>
 8000bae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f013 0f02 	tst.w	r3, #2
 8000bb8:	d0d3      	beq.n	8000b62 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fd89 	bl	80006d0 <HAL_GetTick>
 8000bbe:	1b40      	subs	r0, r0, r5
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9f5      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	e116      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bc8:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <HAL_RCC_OscConfig+0x2b8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bce:	f7ff fd7f 	bl	80006d0 <HAL_GetTick>
 8000bd2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bd8:	f013 0f02 	tst.w	r3, #2
 8000bdc:	d006      	beq.n	8000bec <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bde:	f7ff fd77 	bl	80006d0 <HAL_GetTick>
 8000be2:	1b40      	subs	r0, r0, r5
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d9f5      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8000be8:	2003      	movs	r0, #3
 8000bea:	e104      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	f013 0f04 	tst.w	r3, #4
 8000bf2:	d078      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf4:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000bfc:	d10d      	bne.n	8000c1a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c16:	2501      	movs	r5, #1
 8000c18:	e000      	b.n	8000c1c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8000c1a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1c:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <HAL_RCC_OscConfig+0x2bc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c24:	d021      	beq.n	8000c6a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c26:	68a3      	ldr	r3, [r4, #8]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d032      	beq.n	8000c92 <HAL_RCC_OscConfig+0x26e>
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d036      	beq.n	8000c9e <HAL_RCC_OscConfig+0x27a>
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	671a      	str	r2, [r3, #112]	; 0x70
 8000c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c3c:	f022 0204 	bic.w	r2, r2, #4
 8000c40:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c42:	68a3      	ldr	r3, [r4, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d034      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c48:	f7ff fd42 	bl	80006d0 <HAL_GetTick>
 8000c4c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c52:	f013 0f02 	tst.w	r3, #2
 8000c56:	d145      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c58:	f7ff fd3a 	bl	80006d0 <HAL_GetTick>
 8000c5c:	1b80      	subs	r0, r0, r6
 8000c5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d9f3      	bls.n	8000c4e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000c66:	2003      	movs	r0, #3
 8000c68:	e0c5      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_RCC_OscConfig+0x2bc>)
 8000c6c:	6813      	ldr	r3, [r2, #0]
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c74:	f7ff fd2c 	bl	80006d0 <HAL_GetTick>
 8000c78:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_RCC_OscConfig+0x2bc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c82:	d1d0      	bne.n	8000c26 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c84:	f7ff fd24 	bl	80006d0 <HAL_GetTick>
 8000c88:	1b80      	subs	r0, r0, r6
 8000c8a:	2802      	cmp	r0, #2
 8000c8c:	d9f5      	bls.n	8000c7a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000c8e:	2003      	movs	r0, #3
 8000c90:	e0b1      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000c94:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000c9c:	e7d1      	b.n	8000c42 <HAL_RCC_OscConfig+0x21e>
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ca2:	f042 0204 	orr.w	r2, r2, #4
 8000ca6:	671a      	str	r2, [r3, #112]	; 0x70
 8000ca8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000caa:	f042 0201 	orr.w	r2, r2, #1
 8000cae:	671a      	str	r2, [r3, #112]	; 0x70
 8000cb0:	e7c7      	b.n	8000c42 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb2:	f7ff fd0d 	bl	80006d0 <HAL_GetTick>
 8000cb6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_RCC_OscConfig+0x2b0>)
 8000cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbc:	f013 0f02 	tst.w	r3, #2
 8000cc0:	d010      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc2:	f7ff fd05 	bl	80006d0 <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d9f3      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	e090      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	42470000 	.word	0x42470000
 8000cdc:	42470e80 	.word	0x42470e80
 8000ce0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ce4:	b9ed      	cbnz	r5, 8000d22 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce6:	69a3      	ldr	r3, [r4, #24]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 8083 	beq.w	8000df4 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cee:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000cf0:	6892      	ldr	r2, [r2, #8]
 8000cf2:	f002 020c 	and.w	r2, r2, #12
 8000cf6:	2a08      	cmp	r2, #8
 8000cf8:	d051      	beq.n	8000d9e <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d017      	beq.n	8000d2e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <HAL_RCC_OscConfig+0x3f4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fce4 	bl	80006d0 <HAL_GetTick>
 8000d08:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d12:	d042      	beq.n	8000d9a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d14:	f7ff fcdc 	bl	80006d0 <HAL_GetTick>
 8000d18:	1b00      	subs	r0, r0, r4
 8000d1a:	2802      	cmp	r0, #2
 8000d1c:	d9f5      	bls.n	8000d0a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
 8000d20:	e069      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d22:	4a3c      	ldr	r2, [pc, #240]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000d24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	e7db      	b.n	8000ce6 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <HAL_RCC_OscConfig+0x3f4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d34:	f7ff fccc 	bl	80006d0 <HAL_GetTick>
 8000d38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d42:	d006      	beq.n	8000d52 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d44:	f7ff fcc4 	bl	80006d0 <HAL_GetTick>
 8000d48:	1b40      	subs	r0, r0, r5
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9f5      	bls.n	8000d3a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e051      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d52:	69e3      	ldr	r3, [r4, #28]
 8000d54:	6a22      	ldr	r2, [r4, #32]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d60:	0852      	lsrs	r2, r2, #1
 8000d62:	3a01      	subs	r2, #1
 8000d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000d70:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_RCC_OscConfig+0x3f4>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d78:	f7ff fcaa 	bl	80006d0 <HAL_GetTick>
 8000d7c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d86:	d106      	bne.n	8000d96 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d88:	f7ff fca2 	bl	80006d0 <HAL_GetTick>
 8000d8c:	1b00      	subs	r0, r0, r4
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d9f5      	bls.n	8000d7e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000d92:	2003      	movs	r0, #3
 8000d94:	e02f      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000d96:	2000      	movs	r0, #0
 8000d98:	e02d      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e02b      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d02b      	beq.n	8000dfa <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_RCC_OscConfig+0x3f0>)
 8000da4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8000daa:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000dac:	4291      	cmp	r1, r2
 8000dae:	d126      	bne.n	8000dfe <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000db4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d123      	bne.n	8000e02 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000dba:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000dbc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000dc6:	d11e      	bne.n	8000e06 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000dc8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000dcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dce:	0852      	lsrs	r2, r2, #1
 8000dd0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000dd2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000dd6:	d118      	bne.n	8000e0a <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000dd8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000ddc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000dde:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000de2:	d114      	bne.n	8000e0e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8000de4:	2000      	movs	r0, #0
 8000de6:	e006      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
}
 8000dea:	4770      	bx	lr
        return HAL_ERROR;
 8000dec:	2001      	movs	r0, #1
 8000dee:	e002      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8000df4:	2000      	movs	r0, #0
}
 8000df6:	b002      	add	sp, #8
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	e7fb      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e7f9      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000e02:	2001      	movs	r0, #1
 8000e04:	e7f7      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000e06:	2001      	movs	r0, #1
 8000e08:	e7f5      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	e7f3      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	e7f1      	b.n	8000df6 <HAL_RCC_OscConfig+0x3d2>
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	42470060 	.word	0x42470060

08000e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d03d      	beq.n	8000ea6 <HAL_RCC_GetSysClockFreq+0x8a>
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d13d      	bne.n	8000eaa <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e3c:	d012      	beq.n	8000e64 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e40:	6859      	ldr	r1, [r3, #4]
 8000e42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e46:	2300      	movs	r3, #0
 8000e48:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e4a:	fba1 0100 	umull	r0, r1, r1, r0
 8000e4e:	f7ff f9cd 	bl	80001ec <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000e5e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000e62:	e023      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000e6c:	015c      	lsls	r4, r3, #5
 8000e6e:	2500      	movs	r5, #0
 8000e70:	1ae4      	subs	r4, r4, r3
 8000e72:	f165 0500 	sbc.w	r5, r5, #0
 8000e76:	01ae      	lsls	r6, r5, #6
 8000e78:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8000e7c:	01a7      	lsls	r7, r4, #6
 8000e7e:	1b38      	subs	r0, r7, r4
 8000e80:	eb66 0105 	sbc.w	r1, r6, r5
 8000e84:	00cc      	lsls	r4, r1, #3
 8000e86:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8000e8a:	00c5      	lsls	r5, r0, #3
 8000e8c:	18e8      	adds	r0, r5, r3
 8000e8e:	f144 0100 	adc.w	r1, r4, #0
 8000e92:	028b      	lsls	r3, r1, #10
 8000e94:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000e98:	0284      	lsls	r4, r0, #10
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f7ff f9a4 	bl	80001ec <__aeabi_uldivmod>
 8000ea4:	e7d5      	b.n	8000e52 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ea8:	e000      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	017d7840 	.word	0x017d7840
 8000eb8:	00f42400 	.word	0x00f42400

08000ebc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	f000 809b 	beq.w	8000ff8 <HAL_RCC_ClockConfig+0x13c>
{
 8000ec2:	b570      	push	{r4, r5, r6, lr}
 8000ec4:	460d      	mov	r5, r1
 8000ec6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <HAL_RCC_ClockConfig+0x14c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d208      	bcs.n	8000ee6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ed4:	b2cb      	uxtb	r3, r1
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_RCC_ClockConfig+0x14c>)
 8000ed8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f040 808b 	bne.w	8000ffc <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	f013 0f02 	tst.w	r3, #2
 8000eec:	d017      	beq.n	8000f1e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eee:	f013 0f04 	tst.w	r3, #4
 8000ef2:	d004      	beq.n	8000efe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000ef6:	6893      	ldr	r3, [r2, #8]
 8000ef8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000efc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	f013 0f08 	tst.w	r3, #8
 8000f04:	d004      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f06:	4a41      	ldr	r2, [pc, #260]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f08:	6893      	ldr	r3, [r2, #8]
 8000f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f0e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f10:	4a3e      	ldr	r2, [pc, #248]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f12:	6893      	ldr	r3, [r2, #8]
 8000f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f18:	68a1      	ldr	r1, [r4, #8]
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	f013 0f01 	tst.w	r3, #1
 8000f24:	d032      	beq.n	8000f8c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f26:	6863      	ldr	r3, [r4, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d021      	beq.n	8000f70 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f2c:	1e9a      	subs	r2, r3, #2
 8000f2e:	2a01      	cmp	r2, #1
 8000f30:	d925      	bls.n	8000f7e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f32:	4a36      	ldr	r2, [pc, #216]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	f012 0f02 	tst.w	r2, #2
 8000f3a:	d061      	beq.n	8001000 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3c:	4933      	ldr	r1, [pc, #204]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f3e:	688a      	ldr	r2, [r1, #8]
 8000f40:	f022 0203 	bic.w	r2, r2, #3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000f48:	f7ff fbc2 	bl	80006d0 <HAL_GetTick>
 8000f4c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	6862      	ldr	r2, [r4, #4]
 8000f58:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f5c:	d016      	beq.n	8000f8c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5e:	f7ff fbb7 	bl	80006d0 <HAL_GetTick>
 8000f62:	1b80      	subs	r0, r0, r6
 8000f64:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f68:	4298      	cmp	r0, r3
 8000f6a:	d9f0      	bls.n	8000f4e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	e042      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000f78:	d1e0      	bne.n	8000f3c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	e03b      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f86:	d1d9      	bne.n	8000f3c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e034      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_RCC_ClockConfig+0x14c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	42ab      	cmp	r3, r5
 8000f96:	d907      	bls.n	8000fa8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f98:	b2ea      	uxtb	r2, r5
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_RCC_ClockConfig+0x14c>)
 8000f9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	42ab      	cmp	r3, r5
 8000fa6:	d12d      	bne.n	8001004 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	f013 0f04 	tst.w	r3, #4
 8000fae:	d006      	beq.n	8000fbe <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000fb2:	6893      	ldr	r3, [r2, #8]
 8000fb4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fb8:	68e1      	ldr	r1, [r4, #12]
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	f013 0f08 	tst.w	r3, #8
 8000fc4:	d007      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fce:	6921      	ldr	r1, [r4, #16]
 8000fd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fd4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fd6:	f7ff ff21 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_RCC_ClockConfig+0x150>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_RCC_ClockConfig+0x154>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	40d8      	lsrs	r0, r3
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_RCC_ClockConfig+0x158>)
 8000fea:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_RCC_ClockConfig+0x15c>)
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	f7ff fb22 	bl	8000638 <HAL_InitTick>
  return HAL_OK;
 8000ff4:	2000      	movs	r0, #0
}
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000ff8:	2001      	movs	r0, #1
}
 8000ffa:	4770      	bx	lr
      return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e7fa      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
 8001002:	e7f8      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001004:	2001      	movs	r0, #1
 8001006:	e7f6      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x13a>
 8001008:	40023c00 	.word	0x40023c00
 800100c:	40023800 	.word	0x40023800
 8001010:	080016ac 	.word	0x080016ac
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <HAL_RCC_GetHCLKFreq+0x8>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001028:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800102a:	f7ff fff7 	bl	800101c <HAL_RCC_GetHCLKFreq>
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
}
 800103a:	40d8      	lsrs	r0, r3
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	080016bc 	.word	0x080016bc

08001048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001048:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800104a:	f7ff ffe7 	bl	800101c <HAL_RCC_GetHCLKFreq>
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001056:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
}
 800105a:	40d8      	lsrs	r0, r3
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	080016bc 	.word	0x080016bc

08001068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800106c:	6802      	ldr	r2, [r0, #0]
 800106e:	6913      	ldr	r3, [r2, #16]
 8001070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001074:	68c1      	ldr	r1, [r0, #12]
 8001076:	430b      	orrs	r3, r1
 8001078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800107a:	6883      	ldr	r3, [r0, #8]
 800107c:	6902      	ldr	r2, [r0, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	6942      	ldr	r2, [r0, #20]
 8001082:	4313      	orrs	r3, r2
 8001084:	69c2      	ldr	r2, [r0, #28]
 8001086:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001088:	6801      	ldr	r1, [r0, #0]
 800108a:	68cb      	ldr	r3, [r1, #12]
 800108c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001090:	f023 030c 	bic.w	r3, r3, #12
 8001094:	4313      	orrs	r3, r2
 8001096:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001098:	6802      	ldr	r2, [r0, #0]
 800109a:	6953      	ldr	r3, [r2, #20]
 800109c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010a0:	6981      	ldr	r1, [r0, #24]
 80010a2:	430b      	orrs	r3, r1
 80010a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a6:	6803      	ldr	r3, [r0, #0]
 80010a8:	4a34      	ldr	r2, [pc, #208]	; (800117c <UART_SetConfig+0x114>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d006      	beq.n	80010bc <UART_SetConfig+0x54>
 80010ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d002      	beq.n	80010bc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80010b6:	f7ff ffb7 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
 80010ba:	e001      	b.n	80010c0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80010bc:	f7ff ffc4 	bl	8001048 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010c0:	69e3      	ldr	r3, [r4, #28]
 80010c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010c6:	d02a      	beq.n	800111e <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80010c8:	2600      	movs	r6, #0
 80010ca:	1805      	adds	r5, r0, r0
 80010cc:	eb46 0106 	adc.w	r1, r6, r6
 80010d0:	182d      	adds	r5, r5, r0
 80010d2:	eb46 0101 	adc.w	r1, r6, r1
 80010d6:	00cb      	lsls	r3, r1, #3
 80010d8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80010dc:	00ea      	lsls	r2, r5, #3
 80010de:	4615      	mov	r5, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	6863      	ldr	r3, [r4, #4]
 80010e4:	009a      	lsls	r2, r3, #2
 80010e6:	0f9b      	lsrs	r3, r3, #30
 80010e8:	1828      	adds	r0, r5, r0
 80010ea:	eb46 0101 	adc.w	r1, r6, r1
 80010ee:	f7ff f87d 	bl	80001ec <__aeabi_uldivmod>
 80010f2:	4d23      	ldr	r5, [pc, #140]	; (8001180 <UART_SetConfig+0x118>)
 80010f4:	fba5 3200 	umull	r3, r2, r5, r0
 80010f8:	0951      	lsrs	r1, r2, #5
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	fb03 0311 	mls	r3, r3, r1, r0
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	3332      	adds	r3, #50	; 0x32
 8001104:	fba5 2303 	umull	r2, r3, r5, r3
 8001108:	095b      	lsrs	r3, r3, #5
 800110a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800110e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	6821      	ldr	r1, [r4, #0]
 8001118:	4413      	add	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
  }
}
 800111c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800111e:	2600      	movs	r6, #0
 8001120:	1805      	adds	r5, r0, r0
 8001122:	eb46 0106 	adc.w	r1, r6, r6
 8001126:	182d      	adds	r5, r5, r0
 8001128:	eb46 0101 	adc.w	r1, r6, r1
 800112c:	00cb      	lsls	r3, r1, #3
 800112e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001132:	00ea      	lsls	r2, r5, #3
 8001134:	4615      	mov	r5, r2
 8001136:	4619      	mov	r1, r3
 8001138:	6862      	ldr	r2, [r4, #4]
 800113a:	4633      	mov	r3, r6
 800113c:	1892      	adds	r2, r2, r2
 800113e:	eb46 0303 	adc.w	r3, r6, r3
 8001142:	1828      	adds	r0, r5, r0
 8001144:	eb46 0101 	adc.w	r1, r6, r1
 8001148:	f7ff f850 	bl	80001ec <__aeabi_uldivmod>
 800114c:	4d0c      	ldr	r5, [pc, #48]	; (8001180 <UART_SetConfig+0x118>)
 800114e:	fba5 3200 	umull	r3, r2, r5, r0
 8001152:	0951      	lsrs	r1, r2, #5
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	fb03 0311 	mls	r3, r3, r1, r0
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	3332      	adds	r3, #50	; 0x32
 800115e:	fba5 2303 	umull	r2, r3, r5, r3
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	005a      	lsls	r2, r3, #1
 8001166:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800116a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	6821      	ldr	r1, [r4, #0]
 8001174:	4413      	add	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
 8001178:	e7d0      	b.n	800111c <UART_SetConfig+0xb4>
 800117a:	bf00      	nop
 800117c:	40011000 	.word	0x40011000
 8001180:	51eb851f 	.word	0x51eb851f

08001184 <UART_WaitOnFlagUntilTimeout>:
{
 8001184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001188:	4605      	mov	r5, r0
 800118a:	460f      	mov	r7, r1
 800118c:	4616      	mov	r6, r2
 800118e:	4699      	mov	r9, r3
 8001190:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001194:	682c      	ldr	r4, [r5, #0]
 8001196:	6824      	ldr	r4, [r4, #0]
 8001198:	ea37 0304 	bics.w	r3, r7, r4
 800119c:	bf0c      	ite	eq
 800119e:	2401      	moveq	r4, #1
 80011a0:	2400      	movne	r4, #0
 80011a2:	42b4      	cmp	r4, r6
 80011a4:	d12d      	bne.n	8001202 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 80011a6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80011aa:	d0f3      	beq.n	8001194 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011ac:	f1b8 0f00 	cmp.w	r8, #0
 80011b0:	d005      	beq.n	80011be <UART_WaitOnFlagUntilTimeout+0x3a>
 80011b2:	f7ff fa8d 	bl	80006d0 <HAL_GetTick>
 80011b6:	eba0 0009 	sub.w	r0, r0, r9
 80011ba:	4540      	cmp	r0, r8
 80011bc:	d9ea      	bls.n	8001194 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011be:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011c0:	f102 030c 	add.w	r3, r2, #12
 80011c4:	e853 3f00 	ldrex	r3, [r3]
 80011c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011cc:	320c      	adds	r2, #12
 80011ce:	e842 3100 	strex	r1, r3, [r2]
 80011d2:	2900      	cmp	r1, #0
 80011d4:	d1f3      	bne.n	80011be <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011d6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011d8:	f102 0314 	add.w	r3, r2, #20
 80011dc:	e853 3f00 	ldrex	r3, [r3]
 80011e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011e4:	3214      	adds	r2, #20
 80011e6:	e842 3100 	strex	r1, r3, [r2]
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d1f3      	bne.n	80011d6 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80011ee:	2320      	movs	r3, #32
 80011f0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80011f4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80011f8:	2300      	movs	r3, #0
 80011fa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
 8001200:	e000      	b.n	8001204 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8001202:	2000      	movs	r0, #0
}
 8001204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001208 <HAL_UART_Init>:
  if (huart == NULL)
 8001208:	b358      	cbz	r0, 8001262 <HAL_UART_Init+0x5a>
{
 800120a:	b510      	push	{r4, lr}
 800120c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800120e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001212:	b30b      	cbz	r3, 8001258 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001214:	2324      	movs	r3, #36	; 0x24
 8001216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800121a:	6822      	ldr	r2, [r4, #0]
 800121c:	68d3      	ldr	r3, [r2, #12]
 800121e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001222:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff ff1f 	bl	8001068 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	6913      	ldr	r3, [r2, #16]
 800122e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001232:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001234:	6822      	ldr	r2, [r4, #0]
 8001236:	6953      	ldr	r3, [r2, #20]
 8001238:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800123c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	68d3      	ldr	r3, [r2, #12]
 8001242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001246:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001248:	2000      	movs	r0, #0
 800124a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800124c:	2320      	movs	r3, #32
 800124e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001252:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001256:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001258:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800125c:	f7ff f95e 	bl	800051c <HAL_UART_MspInit>
 8001260:	e7d8      	b.n	8001214 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
}
 8001264:	4770      	bx	lr

08001266 <HAL_UART_Transmit>:
{
 8001266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800126e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b20      	cmp	r3, #32
 8001276:	d154      	bne.n	8001322 <HAL_UART_Transmit+0xbc>
 8001278:	4604      	mov	r4, r0
 800127a:	460d      	mov	r5, r1
 800127c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800127e:	2900      	cmp	r1, #0
 8001280:	d053      	beq.n	800132a <HAL_UART_Transmit+0xc4>
 8001282:	2a00      	cmp	r2, #0
 8001284:	d053      	beq.n	800132e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001286:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d051      	beq.n	8001332 <HAL_UART_Transmit+0xcc>
 800128e:	2301      	movs	r3, #1
 8001290:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001298:	2321      	movs	r3, #33	; 0x21
 800129a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800129e:	f7ff fa17 	bl	80006d0 <HAL_GetTick>
 80012a2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80012a4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80012a8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ac:	68a3      	ldr	r3, [r4, #8]
 80012ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b2:	d005      	beq.n	80012c0 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80012b4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80012b8:	2300      	movs	r3, #0
 80012ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80012be:	e012      	b.n	80012e6 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	b113      	cbz	r3, 80012ca <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80012c4:	f04f 0800 	mov.w	r8, #0
 80012c8:	e7f6      	b.n	80012b8 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 80012ca:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80012cc:	2500      	movs	r5, #0
 80012ce:	e7f3      	b.n	80012b8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80012d0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012da:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80012dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80012de:	b292      	uxth	r2, r2
 80012e0:	3a01      	subs	r2, #1
 80012e2:	b292      	uxth	r2, r2
 80012e4:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80012e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b173      	cbz	r3, 800130a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012ec:	9600      	str	r6, [sp, #0]
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff ff45 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 80012fa:	b9e0      	cbnz	r0, 8001336 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d0e7      	beq.n	80012d0 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001300:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001308:	e7e8      	b.n	80012dc <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800130a:	9600      	str	r6, [sp, #0]
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff ff36 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 8001318:	b978      	cbnz	r0, 800133a <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800131a:	2320      	movs	r3, #32
 800131c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001320:	e000      	b.n	8001324 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8001322:	2002      	movs	r0, #2
}
 8001324:	b002      	add	sp, #8
 8001326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e7fa      	b.n	8001324 <HAL_UART_Transmit+0xbe>
 800132e:	2001      	movs	r0, #1
 8001330:	e7f8      	b.n	8001324 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8001332:	2002      	movs	r0, #2
 8001334:	e7f6      	b.n	8001324 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8001336:	2003      	movs	r0, #3
 8001338:	e7f4      	b.n	8001324 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e7f2      	b.n	8001324 <HAL_UART_Transmit+0xbe>

0800133e <HAL_UART_Receive>:
{
 800133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001346:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b20      	cmp	r3, #32
 800134e:	d15c      	bne.n	800140a <HAL_UART_Receive+0xcc>
 8001350:	4604      	mov	r4, r0
 8001352:	460d      	mov	r5, r1
 8001354:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001356:	2900      	cmp	r1, #0
 8001358:	d05b      	beq.n	8001412 <HAL_UART_Receive+0xd4>
 800135a:	2a00      	cmp	r2, #0
 800135c:	d05b      	beq.n	8001416 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 800135e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001362:	2b01      	cmp	r3, #1
 8001364:	d059      	beq.n	800141a <HAL_UART_Receive+0xdc>
 8001366:	2301      	movs	r3, #1
 8001368:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001370:	2222      	movs	r2, #34	; 0x22
 8001372:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001376:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8001378:	f7ff f9aa 	bl	80006d0 <HAL_GetTick>
 800137c:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800137e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001382:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001386:	68a3      	ldr	r3, [r4, #8]
 8001388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138c:	d005      	beq.n	800139a <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 800138e:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001392:	2300      	movs	r3, #0
 8001394:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8001398:	e017      	b.n	80013ca <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800139a:	6923      	ldr	r3, [r4, #16]
 800139c:	b113      	cbz	r3, 80013a4 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 800139e:	f04f 0800 	mov.w	r8, #0
 80013a2:	e7f6      	b.n	8001392 <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 80013a4:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80013a6:	2500      	movs	r5, #0
 80013a8:	e7f3      	b.n	8001392 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013b2:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 80013b6:	e003      	b.n	80013c0 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80013be:	3501      	adds	r5, #1
      huart->RxXferCount--;
 80013c0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80013c2:	b292      	uxth	r2, r2
 80013c4:	3a01      	subs	r2, #1
 80013c6:	b292      	uxth	r2, r2
 80013c8:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80013ca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	b1bb      	cbz	r3, 8001400 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013d0:	9600      	str	r6, [sp, #0]
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	2120      	movs	r1, #32
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff fed3 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 80013de:	b9f0      	cbnz	r0, 800141e <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 80013e0:	2d00      	cmp	r5, #0
 80013e2:	d0e2      	beq.n	80013aa <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80013e4:	68a3      	ldr	r3, [r4, #8]
 80013e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ea:	d0e5      	beq.n	80013b8 <HAL_UART_Receive+0x7a>
 80013ec:	b913      	cbnz	r3, 80013f4 <HAL_UART_Receive+0xb6>
 80013ee:	6923      	ldr	r3, [r4, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0e1      	beq.n	80013b8 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013fc:	702b      	strb	r3, [r5, #0]
 80013fe:	e7de      	b.n	80013be <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 8001400:	2320      	movs	r3, #32
 8001402:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001406:	2000      	movs	r0, #0
 8001408:	e000      	b.n	800140c <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 800140a:	2002      	movs	r0, #2
}
 800140c:	b002      	add	sp, #8
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001412:	2001      	movs	r0, #1
 8001414:	e7fa      	b.n	800140c <HAL_UART_Receive+0xce>
 8001416:	2001      	movs	r0, #1
 8001418:	e7f8      	b.n	800140c <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 800141a:	2002      	movs	r0, #2
 800141c:	e7f6      	b.n	800140c <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 800141e:	2003      	movs	r0, #3
 8001420:	e7f4      	b.n	800140c <HAL_UART_Receive+0xce>
	...

08001424 <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8001424:	b530      	push	{r4, r5, lr}
 8001426:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	2400      	movs	r4, #0
 800142a:	9400      	str	r4, [sp, #0]
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_GPIO_Init+0x7c>)
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
 8001436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001438:	f002 0201 	and.w	r2, r2, #1
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	9401      	str	r4, [sp, #4]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	f042 0202 	orr.w	r2, r2, #2
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
 800144a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144c:	f002 0202 	and.w	r2, r2, #2
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	9402      	str	r4, [sp, #8]
 8001456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001458:	f042 0204 	orr.w	r2, r2, #4
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001468:	4d0e      	ldr	r5, [pc, #56]	; (80014a4 <MX_GPIO_Init+0x80>)
 800146a:	4622      	mov	r2, r4
 800146c:	2101      	movs	r1, #1
 800146e:	4628      	mov	r0, r5
 8001470:	f7ff fa88 	bl	8000984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001474:	2301      	movs	r3, #1
 8001476:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2302      	movs	r3, #2
 800147e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GREEN_LED_Port, &GPIO_InitStruct);
 8001480:	a903      	add	r1, sp, #12
 8001482:	4628      	mov	r0, r5
 8001484:	f7ff f986 	bl	8000794 <HAL_GPIO_Init>
  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTN_Port, &GPIO_InitStruct);
 8001492:	a903      	add	r1, sp, #12
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_GPIO_Init+0x84>)
 8001496:	f7ff f97d 	bl	8000794 <HAL_GPIO_Init>

}
 800149a:	b009      	add	sp, #36	; 0x24
 800149c:	bd30      	pop	{r4, r5, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800

080014ac <main>:
	btn_state = b_s;
}

uint8_t tx[]="Hello from STM32";
uint8_t* ptr_rx;
int main(void){
 80014ac:	b510      	push	{r4, lr}

  HAL_Init();
 80014ae:	f7ff f8e9 	bl	8000684 <HAL_Init>
  SystemClock_Config();
 80014b2:	f000 f817 	bl	80014e4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b6:	f7ff ffb5 	bl	8001424 <MX_GPIO_Init>
  //MX_ADC1_Init();
  //MX_DAC_Init();
  MX_USART1_UART_Init();
 80014ba:	f000 f86f 	bl	800159c <MX_USART1_UART_Init>

  //HAL_DAC_Start(ptr_hdac, DAC_CHANNEL_1);
  UART_HandleTypeDef* ptr_huart1 = Get_ptr_huart1();
 80014be:	f000 f869 	bl	8001594 <Get_ptr_huart1>
 80014c2:	4604      	mov	r4, r0
  while (1)
  {
	 // Set_value_btn_state(Get_btn_state());
	 // adc_val = Measure_voltage();
	 // Increase_dac_volt_by_btn();
	  ptr_rx = USART_TransmitReceive(ptr_huart1, tx, sizeof(tx), 1);
 80014c4:	2301      	movs	r3, #1
 80014c6:	2211      	movs	r2, #17
 80014c8:	4903      	ldr	r1, [pc, #12]	; (80014d8 <main+0x2c>)
 80014ca:	4620      	mov	r0, r4
 80014cc:	f000 f880 	bl	80015d0 <USART_TransmitReceive>
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <main+0x30>)
 80014d2:	6018      	str	r0, [r3, #0]
  while (1)
 80014d4:	e7f6      	b.n	80014c4 <main+0x18>
 80014d6:	bf00      	nop
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	20000154 	.word	0x20000154

080014e0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <Error_Handler+0x2>

080014e4 <SystemClock_Config>:
{
 80014e4:	b500      	push	{lr}
 80014e6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e8:	2230      	movs	r2, #48	; 0x30
 80014ea:	2100      	movs	r1, #0
 80014ec:	a808      	add	r0, sp, #32
 80014ee:	f000 f8c9 	bl	8001684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	9303      	str	r3, [sp, #12]
 80014f6:	9304      	str	r3, [sp, #16]
 80014f8:	9305      	str	r3, [sp, #20]
 80014fa:	9306      	str	r3, [sp, #24]
 80014fc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <SystemClock_Config+0xa8>)
 8001502:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001504:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001508:	6411      	str	r1, [r2, #64]	; 0x40
 800150a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800150c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001510:	9201      	str	r2, [sp, #4]
 8001512:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <SystemClock_Config+0xac>)
 8001518:	6811      	ldr	r1, [r2, #0]
 800151a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800151e:	6011      	str	r1, [r2, #0]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001526:	9202      	str	r2, [sp, #8]
 8001528:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152a:	2202      	movs	r2, #2
 800152c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	2101      	movs	r1, #1
 8001530:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001532:	2110      	movs	r1, #16
 8001534:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001538:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800153a:	2308      	movs	r3, #8
 800153c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800153e:	23b4      	movs	r3, #180	; 0xb4
 8001540:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001542:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001544:	2304      	movs	r3, #4
 8001546:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	a808      	add	r0, sp, #32
 800154a:	f7ff fa6b 	bl	8000a24 <HAL_RCC_OscConfig>
 800154e:	b9b0      	cbnz	r0, 800157e <SystemClock_Config+0x9a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001550:	f7ff fa28 	bl	80009a4 <HAL_PWREx_EnableOverDrive>
 8001554:	b9a8      	cbnz	r0, 8001582 <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001562:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001566:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001568:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800156c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156e:	2105      	movs	r1, #5
 8001570:	a803      	add	r0, sp, #12
 8001572:	f7ff fca3 	bl	8000ebc <HAL_RCC_ClockConfig>
 8001576:	b930      	cbnz	r0, 8001586 <SystemClock_Config+0xa2>
}
 8001578:	b015      	add	sp, #84	; 0x54
 800157a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800157e:	f7ff ffaf 	bl	80014e0 <Error_Handler>
    Error_Handler();
 8001582:	f7ff ffad 	bl	80014e0 <Error_Handler>
    Error_Handler();
 8001586:	f7ff ffab 	bl	80014e0 <Error_Handler>
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <Get_ptr_huart1>:

UART_HandleTypeDef huart1;

UART_HandleTypeDef* Get_ptr_huart1(){
	return &huart1;
}
 8001594:	4800      	ldr	r0, [pc, #0]	; (8001598 <Get_ptr_huart1+0x4>)
 8001596:	4770      	bx	lr
 8001598:	20000158 	.word	0x20000158

0800159c <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 800159c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800159e:	480a      	ldr	r0, [pc, #40]	; (80015c8 <MX_USART1_UART_Init+0x2c>)
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_USART1_UART_Init+0x30>)
 80015a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80015a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015a8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	2300      	movs	r3, #0
 80015ac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b2:	220c      	movs	r2, #12
 80015b4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	f7ff fe25 	bl	8001208 <HAL_UART_Init>
 80015be:	b900      	cbnz	r0, 80015c2 <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80015c0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015c2:	f7ff ff8d 	bl	80014e0 <Error_Handler>
}
 80015c6:	e7fb      	b.n	80015c0 <MX_USART1_UART_Init+0x24>
 80015c8:	20000158 	.word	0x20000158
 80015cc:	40011000 	.word	0x40011000

080015d0 <USART_TransmitReceive>:
#include "usart_utilities.h"

uint8_t* USART_TransmitReceive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout){
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4604      	mov	r4, r0
 80015d4:	461d      	mov	r5, r3
	static uint8_t rx_mass[256];
	static uint8_t* cntr_addr_rx_mass = rx_mass;
	static uint8_t smbl_cntr = 0;
	uint8_t* cur_pData;
	if (smbl_cntr < Size){
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <USART_TransmitReceive+0x60>)
 80015d8:	7818      	ldrb	r0, [r3, #0]
 80015da:	b283      	uxth	r3, r0
 80015dc:	4293      	cmp	r3, r2
 80015de:	d307      	bcc.n	80015f0 <USART_TransmitReceive+0x20>
		HAL_UART_Receive(huart, cntr_addr_rx_mass, 1, Timeout);
		cntr_addr_rx_mass++;
		//HAL_Delay(100);
		smbl_cntr++;
	}else{
		smbl_cntr = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	4913      	ldr	r1, [pc, #76]	; (8001630 <USART_TransmitReceive+0x60>)
 80015e4:	700b      	strb	r3, [r1, #0]
		cntr_addr_rx_mass -= Size;
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <USART_TransmitReceive+0x64>)
 80015e8:	6801      	ldr	r1, [r0, #0]
 80015ea:	1a89      	subs	r1, r1, r2
 80015ec:	6001      	str	r1, [r0, #0]
		for (uint8_t i = 0; i< Size; i++)
 80015ee:	e019      	b.n	8001624 <USART_TransmitReceive+0x54>
		HAL_UART_Transmit(huart, cur_pData, 1, Timeout);
 80015f0:	462b      	mov	r3, r5
 80015f2:	2201      	movs	r2, #1
 80015f4:	4401      	add	r1, r0
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff fe35 	bl	8001266 <HAL_UART_Transmit>
		HAL_UART_Receive(huart, cntr_addr_rx_mass, 1, Timeout);
 80015fc:	4e0d      	ldr	r6, [pc, #52]	; (8001634 <USART_TransmitReceive+0x64>)
 80015fe:	462b      	mov	r3, r5
 8001600:	2201      	movs	r2, #1
 8001602:	6831      	ldr	r1, [r6, #0]
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fe9a 	bl	800133e <HAL_UART_Receive>
		cntr_addr_rx_mass++;
 800160a:	6833      	ldr	r3, [r6, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	6033      	str	r3, [r6, #0]
		smbl_cntr++;
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <USART_TransmitReceive+0x60>)
 8001612:	7813      	ldrb	r3, [r2, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	7013      	strb	r3, [r2, #0]
 8001618:	e007      	b.n	800162a <USART_TransmitReceive+0x5a>
			rx_mass[i]=0;
 800161a:	4907      	ldr	r1, [pc, #28]	; (8001638 <USART_TransmitReceive+0x68>)
 800161c:	2000      	movs	r0, #0
 800161e:	54c8      	strb	r0, [r1, r3]
		for (uint8_t i = 0; i< Size; i++)
 8001620:	3301      	adds	r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	b299      	uxth	r1, r3
 8001626:	4291      	cmp	r1, r2
 8001628:	d3f7      	bcc.n	800161a <USART_TransmitReceive+0x4a>
	}

	return rx_mass;
}
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <USART_TransmitReceive+0x68>)
 800162c:	bd70      	pop	{r4, r5, r6, pc}
 800162e:	bf00      	nop
 8001630:	20000144 	.word	0x20000144
 8001634:	20000020 	.word	0x20000020
 8001638:	20000044 	.word	0x20000044

0800163c <__libc_init_array>:
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	4d0d      	ldr	r5, [pc, #52]	; (8001674 <__libc_init_array+0x38>)
 8001640:	4c0d      	ldr	r4, [pc, #52]	; (8001678 <__libc_init_array+0x3c>)
 8001642:	1b64      	subs	r4, r4, r5
 8001644:	10a4      	asrs	r4, r4, #2
 8001646:	2600      	movs	r6, #0
 8001648:	42a6      	cmp	r6, r4
 800164a:	d109      	bne.n	8001660 <__libc_init_array+0x24>
 800164c:	4d0b      	ldr	r5, [pc, #44]	; (800167c <__libc_init_array+0x40>)
 800164e:	4c0c      	ldr	r4, [pc, #48]	; (8001680 <__libc_init_array+0x44>)
 8001650:	f000 f820 	bl	8001694 <_init>
 8001654:	1b64      	subs	r4, r4, r5
 8001656:	10a4      	asrs	r4, r4, #2
 8001658:	2600      	movs	r6, #0
 800165a:	42a6      	cmp	r6, r4
 800165c:	d105      	bne.n	800166a <__libc_init_array+0x2e>
 800165e:	bd70      	pop	{r4, r5, r6, pc}
 8001660:	f855 3b04 	ldr.w	r3, [r5], #4
 8001664:	4798      	blx	r3
 8001666:	3601      	adds	r6, #1
 8001668:	e7ee      	b.n	8001648 <__libc_init_array+0xc>
 800166a:	f855 3b04 	ldr.w	r3, [r5], #4
 800166e:	4798      	blx	r3
 8001670:	3601      	adds	r6, #1
 8001672:	e7f2      	b.n	800165a <__libc_init_array+0x1e>
 8001674:	080016cc 	.word	0x080016cc
 8001678:	080016cc 	.word	0x080016cc
 800167c:	080016cc 	.word	0x080016cc
 8001680:	080016d0 	.word	0x080016d0

08001684 <memset>:
 8001684:	4402      	add	r2, r0
 8001686:	4603      	mov	r3, r0
 8001688:	4293      	cmp	r3, r2
 800168a:	d100      	bne.n	800168e <memset+0xa>
 800168c:	4770      	bx	lr
 800168e:	f803 1b01 	strb.w	r1, [r3], #1
 8001692:	e7f9      	b.n	8001688 <memset+0x4>

08001694 <_init>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	bf00      	nop
 8001698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169a:	bc08      	pop	{r3}
 800169c:	469e      	mov	lr, r3
 800169e:	4770      	bx	lr

080016a0 <_fini>:
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a2:	bf00      	nop
 80016a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a6:	bc08      	pop	{r3}
 80016a8:	469e      	mov	lr, r3
 80016aa:	4770      	bx	lr
